#!make

# Ensure the xml2rfc cache directory exists locally
IGNORE := $(shell md $(USERPROFILE)\.cache\xml2rfc)

SRC := core\standard\17-069.adoc

FORMAT_MARKER := mn-output-
FORMATS := $(shell grep "$(FORMAT_MARKER)" $(SRC) | cut -f 2 -d " " | tr "," "\\n" | sort | uniq | tr "\\n" " ")

XML  := $(patsubst %.adoc,%.xml,$(SRC))
XMLRFC3  := $(patsubst %.adoc,%.v3.xml,$(SRC))
HTML := $(patsubst %.adoc,%.html,$(SRC))
DOC  := $(patsubst %.adoc,%.doc,$(SRC))
PDF  := $(patsubst %.adoc,%.pdf,$(SRC))
TXT  := $(patsubst %.adoc,%.txt,$(SRC))
NITS := $(patsubst %.adoc,%.nits,$(wildcard draft-*.adoc))
WSD  := $(wildcard models\*.wsd)
XMI	 := $(patsubst models\%,xmi\%,$(patsubst %.wsd,%.xmi,$(WSD)))
PNG	 := $(patsubst models\%,images\%,$(patsubst %.wsd,%.png,$(WSD)))

COMPILE_CMD_LOCAL := bundle exec metanorma
COMPILE_CMD_DOCKER := docker run -v "$$(pwd)":/metanorma/ ribose/metanorma metanorma

ifdef METANORMA_DOCKER
  COMPILE_CMD := echo "Compiling via docker..." & $(COMPILE_CMD_DOCKER)
else
  COMPILE_CMD := echo "Compiling locally..." & $(COMPILE_CMD_LOCAL)
endif

_OUT_FILES := $(foreach FORMAT,$(FORMATS),$(shell echo $(FORMAT) | tr '[:lower:]' '[:upper:]'))
OUT_FILES  := $(foreach F,$(_OUT_FILES),$($F))

all: $(OUT_FILES)

%.v3.xml %.xml %.html %.doc %.pdf %.txt:	%.adoc | bundle
	${COMPILE_CMD} $^

images: $(PNG)

images\%.png: models/%.wsd
	plantuml -tpng -o ../images/ $<

xmi: $(XMI)

xmi\%.xmi: models\%.wsd
	plantuml -xmi:star -o ../xmi/ $<

define FORMAT_TASKS
OUT_FILES-$(FORMAT) := $($(shell echo $(FORMAT) | tr '[:lower:]' '[:upper:]'))

open-$(FORMAT):
	$$(OUT_FILES-$(FORMAT))

clean-$(FORMAT):
	rm $$(OUT_FILES-$(FORMAT))

$(FORMAT): clean-$(FORMAT) $$(OUT_FILES-$(FORMAT))

.PHONY: clean-$(FORMAT)

endef

$(foreach FORMAT,$(FORMATS),$(eval $(FORMAT_TASKS)))

open: open-html

clean:
	rm -rf $(OUT_FILES)

bundle:
	IF "" == "${METANORMA_DOCKER}" bundle

.PHONY: bundle all open clean