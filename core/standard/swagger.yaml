swagger: '2.0'
info:
  title: A sample API conforming to the OGC Web Feature Service standard
  version: 0.0.1
  description: |-
    WARNING - THIS IS WORK IN PROGRESS\
    WARNING - This is a Swagger / OpenAPI 2.0 variant. WFS 3.0 is expected to use OAS 3.0, not 2.0.\
    TODO - Add a description of the sample service.\
    TODO - Add security elements in a separate example.\
    TODO - Connect to a live service.
  contact:
    name: Acme Corporation
    email: info@example.org
    url: 'http://example.org/'
  license:
    name: CC-BY 4.0 license
    url: 'https://creativecommons.org/licenses/by/4.0/'
schemes:
  - http
host: data.example.org
basePath: /
paths:
  /:
    get:
      summary: describe the feature collections in the dataset
      operationId: describeCollections
      tags:
        - Capabilities
      parameters:
        - $ref: '#/parameters/f'
      produces:
        - application/json
        - text/html
      responses:
        '200':
          description: The feature collections shared by this API.
          schema:
            $ref: '#/definitions/content'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  /api/conformance:
    get:
      summary: >-
        list all requirements classes specified in a standard (e.g., WFS 3.0) that the server conforms to
      operationId: getRequirementsClasses
      tags:
        - Capabilities
      produces:
        - application/json
      responses:
        '200':
          description: >-
            the URIs of all requirements classes supported by the server
          schema:
            $ref: '#/definitions/req-classes'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  /buildings:
    get:
      summary: retrieve building features; use conneg to request HTML or GeoJSON
      description: >-
        Every feature in a dataset belongs to one collection of features. A
        dataset may consist of multiple feature collections. Typically, a
        feature collection is a collection of features of a similar type,
        based on acommon schema.

        This sample WFS has a single feature collection for buildings.
      operationId: getBuildings
      tags:
        - Features
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/bbox'
        - $ref: '#/parameters/function'
      produces:
        - application/geo+json
        - text/html
      responses:
        '200':
          description: >-
            Information about the feature collection plus the first features
            matching the selection parameters.
          schema:
            $ref: '#/definitions/featureCollection'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  /buildings.json:
    get:
      summary: retrieve building features in GeoJSON
      description: >-
        Every feature in a dataset belongs to one collection of features. A
        dataset may consist of multiple feature collections. Typically, a
        feature collection is a collection of features of a similar type,
        based on acommon schema.

        This sample WFS has a single feature collection for buildings.
      operationId: getBuildingsJSON
      tags:
        - Features
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/bbox'
        - $ref: '#/parameters/function'
      produces:
        - application/geo+json
      responses:
        '200':
          description: >-
            Information about the feature collection plus the first features
            matching the selection parameters.
          schema:
            $ref: '#/definitions/featureCollection'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  '/buildings/{id}':
    get:
      summary: retrieve a building; use conneg to request HTML or GeoJSON
      operationId: getBuilding
      tags:
        - Features
      parameters:
        - $ref: '#/parameters/id'
      produces:
        - application/geo+json
        - text/html
      responses:
        '200':
          description: A feature.
          schema:
            $ref: '#/definitions/building'
        '404':
          description: 'The feature with id {id} does not exist.'
          schema:
            $ref: '#/definitions/exception'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
  '/buildings/{id}.json':
    get:
      summary: retrieve a building in GeoJSON
      operationId: getBuildingJSON
      tags:
        - Features
      parameters:
        - $ref: '#/parameters/id'
      produces:
        - application/geo+json
      responses:
        '200':
          description: A feature.
          schema:
            $ref: '#/definitions/building'
        '404':
          description: 'The feature with id {id} does not exist.'
          schema:
            $ref: '#/definitions/exception'
        default:
          description: An error occured.
          schema:
            $ref: '#/definitions/exception'
parameters:
  limit:
    name: limit
    in: query
    description: >-
      The optional limit parameter limits the number of items that are presented
      in the response document.\

      Only items are counted that are on the first level of the collection in
      the response document.  Nested objects contained within the explicitly
      requested items shall not be counted.\

      Minimum = 1.\

      Maximum = 10000.\

      Default = 10.
    type: integer
    minimum: 1
    maximum: 10000
    default: 10
  bbox:
    name: bbox
    in: query
    description: >-
      Only features that have a geometry that intersects the bounding box are
      selected. The bounding box is provided as four numbers:

      * Lower left corner, coordinate axis 1
      * Lower left corner, coordinate axis 2
      * Upper right corner, coordinate axis 1
      * Upper right corner, coordinate axis 2

      For WGS84 longitude/latitude this is in most cases the sequence of
      minimum longitude, minimum latitude, maximum longitude and maximum latitude.
      However, in cases where the box spans the antimeridian the first value
      (west-most box edge) is larger than the third value (east-most box edge).
    type: array
    minItems: 4
    maxItems: 4
    items:
      type: number
      minimum: -180
      maximum: 180
    collectionFormat: csv
  function:
    name: function
    in: query
    description: |-
      Only return buildings of a particular function.\

      Default = return all buildings.
    type: string
    enum:
      - residential
      - commercial
      - public use
  id:
    name: id
    in: path
    description: The id of a feature
    required: true
    type: string
definitions:
  exception:
    type: object
    required:
      - code
    properties:
      code:
        type: string
      description:
        type: string
  req-classes:
    type: object
    required:
      - conformsTo
    properties:
      conformsTo:
        type: array
        items:
          type: string
        example:
          - http://www.opengis.net/spec/wfs-1/3.0/req/core
          - http://www.opengis.net/spec/wfs-1/3.0/req/oas30
          - http://www.opengis.net/spec/wfs-1/3.0/req/html
          - http://www.opengis.net/spec/wfs-1/3.0/req/geojson
  bbox:
    type: object
    required:
      - bbox
    properties:
      crs:
        type: string
        enum:
          - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
        default: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
      bbox:
        description: west, north, east, south edges of the bounding box
        type: array
        minItems: 4
        maxItems: 4
        items:
          type: number
          minimum: -180
          maximum: 180
        example:
          - -180
          - -90
          - 180
          - 90
  content:
    type: object
    required:
      - collections
    properties:
      collections:
        type: array
        items:
          $ref: '#/definitions/collectionInfo'
  collectionInfo:
    type: object
    required:
      - name
      - links
    properties:
      name:
        type: string
        example: address
      title:
        type: string
        example: address
      description:
        type: string
        example: An address.
      links:
        type: array
        items:
          $ref: '#/definitions/link'
        example:
          - href: 'http://data.example.com/buildings'
            rel: item
          - href: 'http://example.com/concepts/buildings.html'
            rel: describedBy
            type: text/html
      extent:
        $ref: '#/definitions/bbox'
      crs:
        description: TODO - add description ... first crs is the default crs
        type: array
        items:
          type: string
        default:
          - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
        example:
          - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
          - 'http://www.opengis.net/def/crs/EPSG/0/4326'
  link:
    type: object
    required:
      - href
    properties:
      href:
        type: string
      rel:
        type: string
        example: prev
      type:
        type: string
        example: application/geo+json
      hreflang:
        type: string
        example: en
  featureCollection:
    type: object
    required:
      - type
      - features
    properties:
      type:
        type: string
        enum:
          - FeatureCollection
      features:
        type: array
        items:
          $ref: '#/definitions/building'
  Polygon:
    type: object
    required:
      - type
    properties:
      type:
        type: string
        enum:
          - Polygon
      coordinates:
        type: array
        items:
          type: array
          minItems: 4
          items:
            type: array
            minItems: 2
            items:
              type: number
  building:
    type: object
    required:
      - id
      - type
      - geometry
      - properties
    properties:
      type:
        type: string
        enum:
          - Feature
      geometry:
        $ref: '#/definitions/Polygon'
      id:
        type: string
      properties:
        type: object
        properties:
          name:
            type: string
          function:
            type: string
            enum:
              - residential
              - commercial
              - public use
          floors:
            type: integer
            minimum: 1
tags:
  - name: Capabilities
    description: >-
      Essential characteristics of this API including information about the
      data.
  - name: Features
    description: Access to data (features).
